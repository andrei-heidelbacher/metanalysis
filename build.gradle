buildscript {
    ext {
        kotlin_version = '1.3.10'
        dokka_version = '0.9.17'
        jackson_version = '2.9.7'
        jackson_java8_version = '2.9.7'
        jdt_version = '3.13.102'
        junit_version = '4.12'
        picocli_version = '3.8.0'
        system_rules_version = '1.17.1'
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

allprojects {
    group = 'org.metanalysis'
    version = '0.2.11'

    apply plugin: 'kotlin'
    apply plugin: 'jacoco'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions.jvmTarget = '1.8'
    }

    def tmpDir = File.createTempDir()
    tmpDir.deleteOnExit()
    test.workingDir = tmpDir

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

        testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        testImplementation "junit:junit:$junit_version"
    }

    jar {
        from rootProject.file('LICENSE')
        from rootProject.file('NOTICE')
    }

    jacocoTestReport {
        dependsOn test

        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.jetbrains.dokka'

    dokka {
        moduleName = project.name
        includes = ['Module.md']
        impliedPlatforms = ['JVM']
        jdkVersion = 8
        outputFormat = 'javadoc'

        linkMapping {
            dir = "src/main/kotlin"
            url = "https://github.com/andreihh/${rootProject.name}/blob/master/${project.name}/$dir"
            suffix = "#L"
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: dokka) {
        classifier = 'javadoc'
        from dokka.outputDirectory
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

apply plugin: 'application'

mainClassName = 'org.chronolens.Main'

dependencies {
    implementation project(':chronolens-core')
    runtimeOnly project(':services:chronolens-git')
    runtimeOnly project(':services:chronolens-java')
    runtimeOnly project(':analyzers:chronolens-churn')
    runtimeOnly project(':analyzers:chronolens-coupling')
    runtimeOnly project(':analyzers:chronolens-decapsulations')

    testImplementation project(':chronolens-test')
    testImplementation "com.github.stefanbirkner:system-rules:$system_rules_version"
}

task codeCoverageReport(type: JacocoReport) {
    dependsOn {
        allprojects*.jacocoTestReport
    }

    executionData fileTree(project.rootDir.absolutePath)
            .include("**/build/jacoco/*.exec")

    allprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}
